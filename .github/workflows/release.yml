name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [20.x]

    environment: github-actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install rimraf globally
        run: npm install -g rimraf

      - name: Clean and build on macOS or Linux
        if: runner.os != 'Windows'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          npm run clean
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Running build for macOS"
            npm run dist:mac
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Running build for Linux"
            npm run dist:linux
          fi
        shell: bash

      - name: Clean and build on Windows
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Running build for Windows"
          npm run clean
          npm run dist:win
        shell: pwsh

      - name: Zip artifacts on macOS/Linux
        if: runner.os != 'Windows'
        run: |
          echo "Zipping artifacts on macOS/Linux"
          zip -r dist-${{ matrix.os }}.zip ./dist/*
        shell: bash

      - name: Zip artifacts on Windows
        if: runner.os == 'Windows'
        run: |
          echo "Zipping artifacts on Windows"
          Compress-Archive -Path ./dist/* -DestinationPath dist-${{ matrix.os }}.zip
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-dist
          path: dist-${{ matrix.os }}.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: target_owner/target_repo
          token: ${{ secrets.TARGET_REPO_PAT }}
          persist-credentials: false

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Push tag to target repository
        run: |
          git fetch --tags
          git tag -f ${{ github.ref_name }}
          git push origin ${{ github.ref_name }} --force
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-dist
          path: ./dist/ubuntu/
        continue-on-error: true

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-dist
          path: ./dist/macos/
        continue-on-error: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-dist
          path: ./dist/windows/
        continue-on-error: true

      - name: Log downloaded artifacts
        run: |
          echo "Listing downloaded artifacts:"
          ls -l ./dist/ubuntu/
          ls -l ./dist/macos/
          ls -l ./dist/windows/

      - name: Unzip artifacts
        run: |
          echo "Unzipping Ubuntu artifacts"
          if [ -f ./dist/ubuntu/dist-ubuntu-latest.zip ]; then
            unzip -o './dist/ubuntu/dist-ubuntu-latest.zip' -d ./dist/
          else
            echo "No Ubuntu artifacts found"
          fi
          echo "Unzipping macOS artifacts"
          if [ -f ./dist/macos/dist-macos-latest.zip ]; then
            unzip -o './dist/macos/dist-macos-latest.zip' -d ./dist/
          else
            echo "No macOS artifacts found"
          fi
          echo "Unzipping Windows artifacts"
          if [ -f ./dist/windows/dist-windows-latest.zip ]; then
            unzip -o './dist/windows/dist-windows-latest.zip' -d ./dist/
          else
            echo "No Windows artifacts found"
          fi
        continue-on-error: true

      - name: Log unzipped contents
        run: |
          echo "Listing unzipped contents:"
          ls -l ./dist/

      - name: Create release notes
        run: echo "Release notes for version ${{ github.ref_name }}" > release-notes.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}
        with:
          repository: target_owner/target_repo
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: ./release-notes.md
          draft: false
          prerelease: false

      - name: Upload release assets
        run: |
          for file in ./dist/*.{dmg,exe,deb,AppImage,zip,blockmap,.tar.gz,yml}; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ github.ref_name }} "$file" --clobber --repo target_owner/target_repo
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Upload release assets
        run: |
          for file in ./dist/dist/*.{dmg,exe,deb,AppImage,zip,blockmap,.tar.gz,yml}; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ github.ref_name }} "$file" --clobber --repo target_owner/target_repo
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

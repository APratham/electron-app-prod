name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [20.x]

    environment: github-actions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install rimraf globally
        run: npm install -g rimraf

      - name: Clean and build on macOS or Linux
        if: runner.os != 'Windows'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          npm run clean
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Running build for macOS"
            npm run dist:mac
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Running build for Linux"
            npm run dist:linux
          fi
        shell: bash

      - name: Clean and build on Windows
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Running build for Windows"
          npm run clean
          npm run dist:win
        shell: pwsh

      - name: Zip artifacts on macOS/Linux
        if: runner.os != 'Windows'
        run: |
          echo "Zipping artifacts on macOS/Linux"
          zip -r dist-${{ matrix.os }}.zip ./dist/*
        shell: bash

      - name: Zip artifacts on Windows
        if: runner.os == 'Windows'
        run: |
          echo "Zipping artifacts on Windows"
          Compress-Archive -Path ./dist/* -DestinationPath dist-${{ matrix.os }}.zip
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-dist
          path: dist-${{ matrix.os }}.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: APratham/electron-app
          token: ${{ secrets.TARGET_REPO_PAT }}
          persist-credentials: false

      - name: Get the tag name
        id: get_tag_name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Configure Git for pushing
        run: |
          git config --global user.email "a.pratham1998@gmail.com"
          git config --global user.name "APratham"
          git remote set-url origin https://${{ secrets.TARGET_REPO_PAT }}@github.com/APratham/electron-app.git

      - name: Look for previous releases
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ env.TAG_NAME }}^ 2>/dev/null || echo "")
          echo "Previous tag: $PREV_TAG"
        env:
          TAG_NAME: ${{ env.TAG_NAME }}  
        continue-on-error: true    

      - name: Generate release notes
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's/^refs\/tags\///' -e 's/^v//')

          echo "Release notes for version $VERSION" > release-notes.md
          echo "" >> release-notes.md
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" >> release-notes.md
            git log $PREV_TAG..${{ env.TAG_NAME }} --pretty=format:"- %s" >> release-notes.md
          else
            echo "## First Release ðŸŽ‰" >> release-notes.md
          fi
          cat << EOF >> release-notes.md
          ## Available Files and How to Use Them
          - **electron-oauth-app_${VERSION}_amd64.deb**: Can be used on Linux distributions with x64 architecture that support .deb packages.
          - **electron-oauth-app_${VERSION}_arm64.deb**: Can be used on Linux distributions with arm64 architecture that support .deb packages.
          - **Electron.OAuth.App-${VERSION}.AppImage**: Can be used on Linux distributions with x63 architecture and support for .AppImage files. .AppImage files are self-contained and do not require installation.
          - **Electron.OAuth.App-${VERSION}-arm64.AppImage**: Can be used on Linux distributions with arm64 architecture and support for .AppImage files. .AppImage files are self-contained and do not require installation.
          - **Electron.OAuth.App-${VERSION}.dmg**: Can be used on macOS with Apple Sillicon. Since the .dmg file is not signed, you will need to delete the attributes file after installing:
          \`xattr -d com.apple.quarantine /Applications/Electron\\ OAuth\\ App.app\`
          - **Electron.OAuth.App.Setup.${VERSION}.exe**: Can be used by Windows machines with both amd64 and x86-64 architecture.
          - **Electron.OAuth.App-${VERSION}-mac.zip**: macOS application binaries.
          - **Electron.OAuth.App-${VERSION}-win.zip**: Windows application binaries.
          - **Electron.OAuth.App-${VERSION}-linux.zip**: Linux application binaries. 

          The blockmap files are used by the auto-updater to determine which files have changed between releases. The .yml file contains the checksums for the files which is created by electron builder.
          .zip and .tar.gz archives are also included which contain the source files for the application.
          The .yml files can be used to verify the integrity of the downloaded files using the instructions in the README.md file.
          EOF
        env:
          TAG_NAME: ${{ github.ref }}
        continue-on-error: true

      - name: Push the tag to the target repository
        run: |
          git tag $TAG_NAME
          git push origin $TAG_NAME
        env:
          TAG_NAME: ${{ env.TAG_NAME }}
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Create GitHub Release
        id: create_release
        run: |
          gh release create ${{ env.TAG_NAME }} --repo APratham/electron-app --title "Release ${{ env.TAG_NAME }}" --notes-file release-notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-dist
          path: ./dist/ubuntu/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-dist
          path: ./dist/macos/

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-dist
          path: ./dist/windows/

      - name: Log downloaded artifacts
        run: |
          echo "Listing downloaded artifacts:"
          ls -l ./dist/ubuntu/
          ls -l ./dist/macos/
          ls -l ./dist/windows/

      - name: Unzip artifacts
        run: |
          echo "Unzipping Ubuntu artifacts"
          unzip -o './dist/ubuntu/dist-ubuntu-latest.zip' -d ./dist/
          echo "Unzipping macOS artifacts"
          unzip -o './dist/macos/dist-macos-latest.zip' -d ./dist/
          echo "Unzipping Windows artifacts"
          unzip -o './dist/windows/dist-windows-latest.zip' -d ./dist/
        continue-on-error: true

      - name: Log unzipped contents
        run: |
          echo "Listing unzipped contents:"
          ls -l ./dist/

      - name: List existing release assets
        id: list_assets
        run: |
          gh release view ${{ env.TAG_NAME }} --repo APratham/electron-app --json assets --jq '.assets[].name' > existing_assets.txt
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Upload release assets
        run: |
          for file in ./dist/*.{dmg,exe,deb,AppImage,zip,blockmap,.tar.gz,yml}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if ! grep -qx "$filename" existing_assets.txt; then
                echo "Uploading $file"
                gh release upload ${{ env.TAG_NAME }} "$file" --clobber --repo APratham/electron-app
              else
                echo "$file already exists in the release"
              fi
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Upload release assets from nested dist
        run: |
          for file in ./dist/dist/*.{dmg,exe,deb,AppImage,zip,blockmap,.tar.gz,yml}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if ! grep -qx "$filename" existing_assets.txt; then
                echo "Uploading $file"
                gh release upload ${{ env.TAG_NAME }} "$file" --clobber --repo APratham/electron-app
              else
                echo "$file already exists in the release"
              fi
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}
